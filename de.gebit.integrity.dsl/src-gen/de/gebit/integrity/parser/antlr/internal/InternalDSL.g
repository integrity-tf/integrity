/*
 * generated by Xtext
 */
grammar InternalDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.gebit.integrity.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.gebit.integrity.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.gebit.integrity.services.DSLGrammarAccess;

}

@parser::members {

 	private DSLGrammarAccess grammarAccess;
 	
    public InternalDSLParser(TokenStream input, DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getModelAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"de.gebit.integrity.DSL.Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getModelAccess().getNLParserRuleCall_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_3_0()); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.gebit.integrity.DSL.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getPackageDefinitionParserRuleCall_0()); 
    }
    this_PackageDefinition_0=rulePackageDefinition
    { 
        $current = $this_PackageDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForkDefinitionParserRuleCall_1()); 
    }
    this_ForkDefinition_1=ruleForkDefinition
    { 
        $current = $this_ForkDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariantDefinitionParserRuleCall_2()); 
    }
    this_VariantDefinition_2=ruleVariantDefinition
    { 
        $current = $this_VariantDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleComment
entryRuleVisibleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleCommentRule()); }
	 iv_ruleVisibleComment=ruleVisibleComment 
	 { $current=$iv_ruleVisibleComment.current; } 
	 EOF 
;

// Rule VisibleComment
ruleVisibleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVisibleCommentAccess().getVisibleSingleLineCommentParserRuleCall_0()); 
    }
    this_VisibleSingleLineComment_0=ruleVisibleSingleLineComment
    { 
        $current = $this_VisibleSingleLineComment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVisibleCommentAccess().getVisibleMultiLineCommentParserRuleCall_1()); 
    }
    this_VisibleMultiLineComment_1=ruleVisibleMultiLineComment
    { 
        $current = $this_VisibleMultiLineComment_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleSingleLineComment
entryRuleVisibleSingleLineComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleSingleLineCommentRule()); }
	 iv_ruleVisibleSingleLineComment=ruleVisibleSingleLineComment 
	 { $current=$iv_ruleVisibleSingleLineComment.current; } 
	 EOF 
;

// Rule VisibleSingleLineComment
ruleVisibleSingleLineComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVisibleSingleLineCommentAccess().getVisibleSingleLineNormalCommentParserRuleCall_0()); 
    }
    this_VisibleSingleLineNormalComment_0=ruleVisibleSingleLineNormalComment
    { 
        $current = $this_VisibleSingleLineNormalComment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVisibleSingleLineCommentAccess().getVisibleSingleLineTitleCommentParserRuleCall_1()); 
    }
    this_VisibleSingleLineTitleComment_1=ruleVisibleSingleLineTitleComment
    { 
        $current = $this_VisibleSingleLineTitleComment_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleSingleLineNormalComment
entryRuleVisibleSingleLineNormalComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleSingleLineNormalCommentRule()); }
	 iv_ruleVisibleSingleLineNormalComment=ruleVisibleSingleLineNormalComment 
	 { $current=$iv_ruleVisibleSingleLineNormalComment.current; } 
	 EOF 
;

// Rule VisibleSingleLineNormalComment
ruleVisibleSingleLineNormalComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_content_0_0=RULE_SL_VISIBLE_COMMENT
		{
			newLeafNode(lv_content_0_0, grammarAccess.getVisibleSingleLineNormalCommentAccess().getContentSL_VISIBLE_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibleSingleLineNormalCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"de.gebit.integrity.DSL.SL_VISIBLE_COMMENT");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVisibleSingleLineNormalCommentAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleSingleLineTitleComment
entryRuleVisibleSingleLineTitleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleSingleLineTitleCommentRule()); }
	 iv_ruleVisibleSingleLineTitleComment=ruleVisibleSingleLineTitleComment 
	 { $current=$iv_ruleVisibleSingleLineTitleComment.current; } 
	 EOF 
;

// Rule VisibleSingleLineTitleComment
ruleVisibleSingleLineTitleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_content_0_0=RULE_SL_VISIBLE_TITLE_COMMENT
		{
			newLeafNode(lv_content_0_0, grammarAccess.getVisibleSingleLineTitleCommentAccess().getContentSL_VISIBLE_TITLE_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibleSingleLineTitleCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"de.gebit.integrity.DSL.SL_VISIBLE_TITLE_COMMENT");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVisibleSingleLineTitleCommentAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleMultiLineComment
entryRuleVisibleMultiLineComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleMultiLineCommentRule()); }
	 iv_ruleVisibleMultiLineComment=ruleVisibleMultiLineComment 
	 { $current=$iv_ruleVisibleMultiLineComment.current; } 
	 EOF 
;

// Rule VisibleMultiLineComment
ruleVisibleMultiLineComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVisibleMultiLineCommentAccess().getVisibleMultiLineNormalCommentParserRuleCall_0()); 
    }
    this_VisibleMultiLineNormalComment_0=ruleVisibleMultiLineNormalComment
    { 
        $current = $this_VisibleMultiLineNormalComment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVisibleMultiLineCommentAccess().getVisibleMultiLineTitleCommentParserRuleCall_1()); 
    }
    this_VisibleMultiLineTitleComment_1=ruleVisibleMultiLineTitleComment
    { 
        $current = $this_VisibleMultiLineTitleComment_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleMultiLineNormalComment
entryRuleVisibleMultiLineNormalComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleMultiLineNormalCommentRule()); }
	 iv_ruleVisibleMultiLineNormalComment=ruleVisibleMultiLineNormalComment 
	 { $current=$iv_ruleVisibleMultiLineNormalComment.current; } 
	 EOF 
;

// Rule VisibleMultiLineNormalComment
ruleVisibleMultiLineNormalComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_content_0_0=RULE_ML_VISIBLE_COMMENT
		{
			newLeafNode(lv_content_0_0, grammarAccess.getVisibleMultiLineNormalCommentAccess().getContentML_VISIBLE_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibleMultiLineNormalCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"de.gebit.integrity.DSL.ML_VISIBLE_COMMENT");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVisibleMultiLineNormalCommentAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleMultiLineTitleComment
entryRuleVisibleMultiLineTitleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleMultiLineTitleCommentRule()); }
	 iv_ruleVisibleMultiLineTitleComment=ruleVisibleMultiLineTitleComment 
	 { $current=$iv_ruleVisibleMultiLineTitleComment.current; } 
	 EOF 
;

// Rule VisibleMultiLineTitleComment
ruleVisibleMultiLineTitleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_content_0_0=RULE_ML_VISIBLE_TITLE_COMMENT
		{
			newLeafNode(lv_content_0_0, grammarAccess.getVisibleMultiLineTitleCommentAccess().getContentML_VISIBLE_TITLE_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibleMultiLineTitleCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"de.gebit.integrity.DSL.ML_VISIBLE_TITLE_COMMENT");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVisibleMultiLineTitleCommentAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVisibleDivider
entryRuleVisibleDivider returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisibleDividerRule()); }
	 iv_ruleVisibleDivider=ruleVisibleDivider 
	 { $current=$iv_ruleVisibleDivider.current; } 
	 EOF 
;

// Rule VisibleDivider
ruleVisibleDivider returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_content_0_0=RULE_DIVIDER
		{
			newLeafNode(lv_content_0_0, grammarAccess.getVisibleDividerAccess().getContentDIVIDERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisibleDividerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"de.gebit.integrity.DSL.DIVIDER");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVisibleDividerAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePackageDefinition
entryRulePackageDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDefinitionRule()); }
	 iv_rulePackageDefinition=rulePackageDefinition 
	 { $current=$iv_rulePackageDefinition.current; } 
	 EOF 
;

// Rule PackageDefinition
rulePackageDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='packagedef' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPackageDefinitionAccess().getPackagedefKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getPackageDefinitionAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPackageDefinitionAccess().getWithKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getPackageDefinitionAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDefinitionAccess().getStatementsPackageStatementParserRuleCall_6_0()); 
	    }
		lv_statements_6_0=rulePackageStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDefinitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.gebit.integrity.DSL.PackageStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='packageend' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPackageDefinitionAccess().getPackageendKeyword_7());
    }

    { 
        newCompositeNode(grammarAccess.getPackageDefinitionAccess().getNLParserRuleCall_8()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePackageStatement
entryRulePackageStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageStatementRule()); }
	 iv_rulePackageStatement=rulePackageStatement 
	 { $current=$iv_rulePackageStatement.current; } 
	 EOF 
;

// Rule PackageStatement
rulePackageStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getForkDefinitionParserRuleCall_0()); 
    }
    this_ForkDefinition_0=ruleForkDefinition
    { 
        $current = $this_ForkDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getVariantDefinitionParserRuleCall_1()); 
    }
    this_VariantDefinition_1=ruleVariantDefinition
    { 
        $current = $this_VariantDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getTestDefinitionParserRuleCall_2()); 
    }
    this_TestDefinition_2=ruleTestDefinition
    { 
        $current = $this_TestDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getCallDefinitionParserRuleCall_3()); 
    }
    this_CallDefinition_3=ruleCallDefinition
    { 
        $current = $this_CallDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getOperationDefinitionParserRuleCall_4()); 
    }
    this_OperationDefinition_4=ruleOperationDefinition
    { 
        $current = $this_OperationDefinition_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getSuiteDefinitionParserRuleCall_5()); 
    }
    this_SuiteDefinition_5=ruleSuiteDefinition
    { 
        $current = $this_SuiteDefinition_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getVariableDefinitionParserRuleCall_6()); 
    }
    this_VariableDefinition_6=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getConstantDefinitionParserRuleCall_7()); 
    }
    this_ConstantDefinition_7=ruleConstantDefinition
    { 
        $current = $this_ConstantDefinition_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getImportAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0()); 
	    }
		lv_importedNamespace_2_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_2_0, 
        		"de.gebit.integrity.DSL.QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForkDefinition
entryRuleForkDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForkDefinitionRule()); }
	 iv_ruleForkDefinition=ruleForkDefinition 
	 { $current=$iv_ruleForkDefinition.current; } 
	 EOF 
;

// Rule ForkDefinition
ruleForkDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForkDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_private_1_0=	'private' 
    {
        newLeafNode(lv_private_1_0, grammarAccess.getForkDefinitionAccess().getPrivatePrivateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForkDefinitionRule());
	        }
       		setWithLastConsumed($current, "private", lv_private_1_0, "private");
	    }

)
)?	otherlv_2='forkdef' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForkDefinitionAccess().getForkdefKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNameQualifiedNameParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_description_6_0=RULE_STRING
		{
			newLeafNode(lv_description_6_0, grammarAccess.getForkDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_6_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForkDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_6_0, 
        		"de.gebit.integrity.DSL.STRING");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_6_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(((	otherlv_8='uses' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForkDefinitionAccess().getUsesKeyword_7_0_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_7_0_0_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForkDefinitionAccess().getForkerClassJavaClassReferenceParserRuleCall_7_0_0_2_0()); 
	    }
		lv_forkerClass_10_0=ruleJavaClassReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkDefinitionRule());
	        }
       		set(
       			$current, 
       			"forkerClass",
        		lv_forkerClass_10_0, 
        		"de.gebit.integrity.DSL.JavaClassReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_11='based on' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getForkDefinitionAccess().getBasedOnKeyword_7_0_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_7_0_1_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForkDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getForkDefinitionAccess().getBaseForkForkDefinitionCrossReference_7_0_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_7_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getForkDefinitionAccess().getParametersForkParameterParserRuleCall_8_0_0()); 
	    }
		lv_parameters_15_0=ruleForkParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_15_0, 
        		"de.gebit.integrity.DSL.ForkParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getForkDefinitionAccess().getNLParserRuleCall_8_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleForkParameter
entryRuleForkParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForkParameterRule()); }
	 iv_ruleForkParameter=ruleForkParameter 
	 { $current=$iv_ruleForkParameter.current; } 
	 EOF 
;

// Rule ForkParameter
ruleForkParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForkParameterAccess().getNameFixedParameterNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleFixedParameterName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.FixedParameterName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getForkParameterAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForkParameterAccess().getColonKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getForkParameterAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForkParameterAccess().getValueValueOrEnumValueOrOperationParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleValueOrEnumValueOrOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForkParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariantDefinition
entryRuleVariantDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariantDefinitionRule()); }
	 iv_ruleVariantDefinition=ruleVariantDefinition 
	 { $current=$iv_ruleVariantDefinition.current; } 
	 EOF 
;

// Rule VariantDefinition
ruleVariantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariantDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariantDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='variantdef' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariantDefinitionAccess().getVariantdefKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getVariantDefinitionAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariantDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariantDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariantDefinitionAccess().getNLParserRuleCall_4()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_description_5_0=RULE_STRING
		{
			newLeafNode(lv_description_5_0, grammarAccess.getVariantDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariantDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_5_0, 
        		"de.gebit.integrity.DSL.STRING");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariantDefinitionAccess().getNLParserRuleCall_5_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleTestDefinition
entryRuleTestDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestDefinitionRule()); }
	 iv_ruleTestDefinition=ruleTestDefinition 
	 { $current=$iv_ruleTestDefinition.current; } 
	 EOF 
;

// Rule TestDefinition
ruleTestDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTestDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='testdef' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestDefinitionAccess().getTestdefKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getTestDefinitionAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTestDefinitionAccess().getNLParserRuleCall_4()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_5='uses' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTestDefinitionAccess().getUsesKeyword_5());
    }

    { 
        newCompositeNode(grammarAccess.getTestDefinitionAccess().getNLParserRuleCall_6()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestDefinitionAccess().getFixtureMethodMethodReferenceParserRuleCall_7_0()); 
	    }
		lv_fixtureMethod_7_0=ruleMethodReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestDefinitionRule());
	        }
       		set(
       			$current, 
       			"fixtureMethod",
        		lv_fixtureMethod_7_0, 
        		"de.gebit.integrity.DSL.MethodReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTestDefinitionAccess().getNLParserRuleCall_8()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCallDefinition
entryRuleCallDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallDefinitionRule()); }
	 iv_ruleCallDefinition=ruleCallDefinition 
	 { $current=$iv_ruleCallDefinition.current; } 
	 EOF 
;

// Rule CallDefinition
ruleCallDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='calldef' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallDefinitionAccess().getCalldefKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getCallDefinitionAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getCallDefinitionAccess().getNLParserRuleCall_4()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_5='uses' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallDefinitionAccess().getUsesKeyword_5());
    }

    { 
        newCompositeNode(grammarAccess.getCallDefinitionAccess().getNLParserRuleCall_6()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallDefinitionAccess().getFixtureMethodMethodReferenceParserRuleCall_7_0()); 
	    }
		lv_fixtureMethod_7_0=ruleMethodReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallDefinitionRule());
	        }
       		set(
       			$current, 
       			"fixtureMethod",
        		lv_fixtureMethod_7_0, 
        		"de.gebit.integrity.DSL.MethodReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getCallDefinitionAccess().getNLParserRuleCall_8()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSuiteDefinition
entryRuleSuiteDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteDefinitionRule()); }
	 iv_ruleSuiteDefinition=ruleSuiteDefinition 
	 { $current=$iv_ruleSuiteDefinition.current; } 
	 EOF 
;

// Rule SuiteDefinition
ruleSuiteDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_private_1_0=	'private' 
    {
        newLeafNode(lv_private_1_0, grammarAccess.getSuiteDefinitionAccess().getPrivatePrivateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteDefinitionRule());
	        }
       		setWithLastConsumed($current, "private", lv_private_1_0, "private");
	    }

)
)?(
(
		lv_singleRun_2_0=	'single-run' 
    {
        newLeafNode(lv_singleRun_2_0, grammarAccess.getSuiteDefinitionAccess().getSingleRunSingleRunKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteDefinitionRule());
	        }
       		setWithLastConsumed($current, "singleRun", lv_singleRun_2_0, "single-run");
	    }

)
)?(
(
		lv_inlined_3_0=	'inlined' 
    {
        newLeafNode(lv_inlined_3_0, grammarAccess.getSuiteDefinitionAccess().getInlinedInlinedKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteDefinitionRule());
	        }
       		setWithLastConsumed($current, "inlined", lv_inlined_3_0, "inlined");
	    }

)
)?	otherlv_4='suitedef' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSuiteDefinitionAccess().getSuitedefKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNameQualifiedNameParserRuleCall_6_0()); 
	    }
		lv_name_6_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_7()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_8='gets' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSuiteDefinitionAccess().getGetsKeyword_8_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getParametersSuiteParameterDefinitionParserRuleCall_8_1_0_0()); 
	    }
		lv_parameters_9_0=ruleSuiteParameterDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_9_0, 
        		"de.gebit.integrity.DSL.SuiteParameterDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_8_1_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+)?(	otherlv_11='returns' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSuiteDefinitionAccess().getReturnsKeyword_9_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getReturnSuiteReturnDefinitionParserRuleCall_9_1_0_0()); 
	    }
		lv_return_12_0=ruleSuiteReturnDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteDefinitionRule());
	        }
       		add(
       			$current, 
       			"return",
        		lv_return_12_0, 
        		"de.gebit.integrity.DSL.SuiteReturnDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_9_1_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+)?(	otherlv_14='requires' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSuiteDefinitionAccess().getRequiresKeyword_10_0());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_10_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getDependenciesSuiteDefinitionCrossReference_10_2_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_10_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*)?(	otherlv_18='concludedby' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSuiteDefinitionAccess().getConcludedbyKeyword_11_0());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_11_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getFinalizersSuiteDefinitionCrossReference_11_2_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_11_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*)?	otherlv_22='with' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getSuiteDefinitionAccess().getWithKeyword_12());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_13()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getStatementsSuiteStatementParserRuleCall_14_0()); 
	    }
		lv_statements_24_0=ruleSuiteStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteDefinitionRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_24_0, 
        		"de.gebit.integrity.DSL.SuiteStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_25='suiteend' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getSuiteDefinitionAccess().getSuiteendKeyword_15());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteDefinitionAccess().getNLParserRuleCall_16()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSuiteParameterDefinition
entryRuleSuiteParameterDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteParameterDefinitionRule()); }
	 iv_ruleSuiteParameterDefinition=ruleSuiteParameterDefinition 
	 { $current=$iv_ruleSuiteParameterDefinition.current; } 
	 EOF 
;

// Rule SuiteParameterDefinition
ruleSuiteParameterDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteParameterDefinitionAccess().getNameVariableEntityParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleVariableEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteParameterDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.VariableEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getSuiteParameterDefinitionAccess().getNLParserRuleCall_1_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='by default' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuiteParameterDefinitionAccess().getByDefaultKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteParameterDefinitionAccess().getDefaultValueOrEnumValueOrOperationCollectionParserRuleCall_1_2_0()); 
	    }
		lv_default_3_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteParameterDefinitionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_3_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSuiteReturnDefinition
entryRuleSuiteReturnDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteReturnDefinitionRule()); }
	 iv_ruleSuiteReturnDefinition=ruleSuiteReturnDefinition 
	 { $current=$iv_ruleSuiteReturnDefinition.current; } 
	 EOF 
;

// Rule SuiteReturnDefinition
ruleSuiteReturnDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteReturnDefinitionAccess().getNameVariableEntityParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleVariableEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteReturnDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.VariableEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOperationDefinition
entryRuleOperationDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationDefinitionRule()); }
	 iv_ruleOperationDefinition=ruleOperationDefinition 
	 { $current=$iv_ruleOperationDefinition.current; } 
	 EOF 
;

// Rule OperationDefinition
ruleOperationDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operationdef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationDefinitionAccess().getOperationdefKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='uses' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationDefinitionAccess().getUsesKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getOperationTypeJavaClassReferenceParserRuleCall_6_0()); 
	    }
		lv_operationType_6_0=ruleJavaClassReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationDefinitionRule());
	        }
       		set(
       			$current, 
       			"operationType",
        		lv_operationType_6_0, 
        		"de.gebit.integrity.DSL.JavaClassReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getNLParserRuleCall_7()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSuiteStatement
entryRuleSuiteStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteStatementRule()); }
	 iv_ruleSuiteStatement=ruleSuiteStatement 
	 { $current=$iv_ruleSuiteStatement.current; } 
	 EOF 
;

// Rule SuiteStatement
ruleSuiteStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSuiteStatementAccess().getSuiteStatementWithResultParserRuleCall_0()); 
    }
    this_SuiteStatementWithResult_0=ruleSuiteStatementWithResult
    { 
        $current = $this_SuiteStatementWithResult_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementAccess().getVariableDefinitionParserRuleCall_1()); 
    }
    this_VariableDefinition_1=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementAccess().getConstantDefinitionParserRuleCall_2()); 
    }
    this_ConstantDefinition_2=ruleConstantDefinition
    { 
        $current = $this_ConstantDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementAccess().getVariableAssignmentParserRuleCall_3()); 
    }
    this_VariableAssignment_3=ruleVariableAssignment
    { 
        $current = $this_VariableAssignment_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementAccess().getVisibleCommentParserRuleCall_4()); 
    }
    this_VisibleComment_4=ruleVisibleComment
    { 
        $current = $this_VisibleComment_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementAccess().getVisibleDividerParserRuleCall_5()); 
    }
    this_VisibleDivider_5=ruleVisibleDivider
    { 
        $current = $this_VisibleDivider_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSuiteStatementWithResult
entryRuleSuiteStatementWithResult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteStatementWithResultRule()); }
	 iv_ruleSuiteStatementWithResult=ruleSuiteStatementWithResult 
	 { $current=$iv_ruleSuiteStatementWithResult.current; } 
	 EOF 
;

// Rule SuiteStatementWithResult
ruleSuiteStatementWithResult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSuiteStatementWithResultAccess().getSuiteParserRuleCall_0()); 
    }
    this_Suite_0=ruleSuite
    { 
        $current = $this_Suite_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementWithResultAccess().getTestParserRuleCall_1()); 
    }
    this_Test_1=ruleTest
    { 
        $current = $this_Test_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementWithResultAccess().getTableTestParserRuleCall_2()); 
    }
    this_TableTest_2=ruleTableTest
    { 
        $current = $this_TableTest_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementWithResultAccess().getCallParserRuleCall_3()); 
    }
    this_Call_3=ruleCall
    { 
        $current = $this_Call_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSuiteStatementWithResultAccess().getTimeSetParserRuleCall_4()); 
    }
    this_TimeSet_4=ruleTimeSet
    { 
        $current = $this_TimeSet_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	 iv_ruleVariableDefinition=ruleVariableDefinition 
	 { $current=$iv_ruleVariableDefinition.current; } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_private_0_0=	'private' 
    {
        newLeafNode(lv_private_0_0, grammarAccess.getVariableDefinitionAccess().getPrivatePrivateKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed($current, "private", lv_private_0_0, "private");
	    }

)
)?	otherlv_1='variable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDefinitionAccess().getVariableKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNameVariableEntityParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleVariableEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"de.gebit.integrity.DSL.VariableEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNLParserRuleCall_4()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_5='initially' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDefinitionAccess().getInitiallyKeyword_5_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNLParserRuleCall_5_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getInitialValueValueOrEnumValueOrOperationCollectionParserRuleCall_5_2_0()); 
	    }
		lv_initialValue_7_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_7_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getNLParserRuleCall_5_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getDocumentationDocumentationCommentParserRuleCall_0_0()); 
	    }
		lv_documentation_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"de.gebit.integrity.DSL.DocumentationComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_private_1_0=	'private' 
    {
        newLeafNode(lv_private_1_0, grammarAccess.getConstantDefinitionAccess().getPrivatePrivateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed($current, "private", lv_private_1_0, "private");
	    }

)
)?	otherlv_2='constant' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDefinitionAccess().getConstantKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getNameConstantEntityParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleConstantEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"de.gebit.integrity.DSL.ConstantEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_6_0_0_0()); 
	    }
		lv_value_6_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getNLParserRuleCall_6_0_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getVariantValuesVariantValueParserRuleCall_6_1_0_0()); 
	    }
		lv_variantValues_8_0=ruleVariantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		add(
       			$current, 
       			"variantValues",
        		lv_variantValues_8_0, 
        		"de.gebit.integrity.DSL.VariantValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getNLParserRuleCall_6_1_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*)((
(
		lv_parameterized_10_0=	'parameterized' 
    {
        newLeafNode(lv_parameterized_10_0, grammarAccess.getConstantDefinitionAccess().getParameterizedParameterizedKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed($current, "parameterized", lv_parameterized_10_0, "parameterized");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getNLParserRuleCall_7_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAssignmentRule()); }
	 iv_ruleVariableAssignment=ruleVariableAssignment 
	 { $current=$iv_ruleVariableAssignment.current; } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assign' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableAssignmentAccess().getAssignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableAssignmentAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getTargetVariableVariableParserRuleCall_6_0()); 
	    }
		lv_target_6_0=ruleVariableVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_6_0, 
        		"de.gebit.integrity.DSL.VariableVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariableAssignmentAccess().getNLParserRuleCall_7()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariantValue
entryRuleVariantValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariantValueRule()); }
	 iv_ruleVariantValue=ruleVariantValue 
	 { $current=$iv_ruleVariantValue.current; } 
	 EOF 
;

// Rule VariantValue
ruleVariantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='in' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariantValueAccess().getInKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariantValueAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariantValueAccess().getNamesVariantDefinitionCrossReference_2_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariantValueAccess().getNLParserRuleCall_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariantValueAccess().getColonKeyword_3());
    }

    { 
        newCompositeNode(grammarAccess.getVariantValueAccess().getNLParserRuleCall_4()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariantValueAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_5_0()); 
	    }
		lv_value_6_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariantValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableEntity
entryRuleVariableEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableEntityRule()); }
	 iv_ruleVariableEntity=ruleVariableEntity 
	 { $current=$iv_ruleVariableEntity.current; } 
	 EOF 
;

// Rule VariableEntity
ruleVariableEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableEntityAccess().getNameQualifiedNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleConstantEntity
entryRuleConstantEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantEntityRule()); }
	 iv_ruleConstantEntity=ruleConstantEntity 
	 { $current=$iv_ruleConstantEntity.current; } 
	 EOF 
;

// Rule ConstantEntity
ruleConstantEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantEntityAccess().getNameQualifiedNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_checkpoint_0_0=	'checkpoint' 
    {
        newLeafNode(lv_checkpoint_0_0, grammarAccess.getTestAccess().getCheckpointCheckpointKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
       		setWithLastConsumed($current, "checkpoint", lv_checkpoint_0_0, "checkpoint");
	    }

)
)?	otherlv_1='test' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestAccess().getTestKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getTestAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getDefinitionTestDefinitionCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getTestAccess().getNLParserRuleCall_4_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getParametersParameterParserRuleCall_4_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"de.gebit.integrity.DSL.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
    { 
        newCompositeNode(grammarAccess.getTestAccess().getNLParserRuleCall_5_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getResultsNamedResultParserRuleCall_5_1_0()); 
	    }
		lv_results_7_0=ruleNamedResult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		add(
       			$current, 
       			"results",
        		lv_results_7_0, 
        		"de.gebit.integrity.DSL.NamedResult");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
    { 
        newCompositeNode(grammarAccess.getTestAccess().getNLParserRuleCall_6_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTestAccess().getEqualsSignKeyword_6_1());
    }

    { 
        newCompositeNode(grammarAccess.getTestAccess().getNLParserRuleCall_6_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getResultValueOrEnumValueOrOperationCollectionParserRuleCall_6_3_0()); 
	    }
		lv_result_11_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_11_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))?
    { 
        newCompositeNode(grammarAccess.getTestAccess().getNLParserRuleCall_7()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTableTest
entryRuleTableTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableTestRule()); }
	 iv_ruleTableTest=ruleTableTest 
	 { $current=$iv_ruleTableTest.current; } 
	 EOF 
;

// Rule TableTest
ruleTableTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='tabletest' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTableTestAccess().getTabletestKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getTableTestAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableTestRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTableTestAccess().getDefinitionTestDefinitionCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getTableTestAccess().getNLParserRuleCall_3_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableTestAccess().getParametersParameterParserRuleCall_3_1_0()); 
	    }
		lv_parameters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableTestRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"de.gebit.integrity.DSL.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    { 
        newCompositeNode(grammarAccess.getTableTestAccess().getNLFORCEDParserRuleCall_4()); 
    }
ruleNLFORCED
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableTestAccess().getParameterHeadersParameterTableHeaderParserRuleCall_5_0()); 
	    }
		lv_parameterHeaders_6_0=ruleParameterTableHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableTestRule());
	        }
       		add(
       			$current, 
       			"parameterHeaders",
        		lv_parameterHeaders_6_0, 
        		"de.gebit.integrity.DSL.ParameterTableHeader");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTableTestAccess().getResultHeadersResultTableHeaderParserRuleCall_6_0()); 
	    }
		lv_resultHeaders_7_0=ruleResultTableHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableTestRule());
	        }
       		add(
       			$current, 
       			"resultHeaders",
        		lv_resultHeaders_7_0, 
        		"de.gebit.integrity.DSL.ResultTableHeader");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='|' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTableTestAccess().getVerticalLineKeyword_7());
    }
((
(
		lv_defaultResultColumn_9_0=	'=' 
    {
        newLeafNode(lv_defaultResultColumn_9_0, grammarAccess.getTableTestAccess().getDefaultResultColumnEqualsSignKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableTestRule());
	        }
       		setWithLastConsumed($current, "defaultResultColumn", lv_defaultResultColumn_9_0, "=");
	    }

)
)	otherlv_10='|' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTableTestAccess().getVerticalLineKeyword_8_1());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getTableTestAccess().getNLFORCEDParserRuleCall_9_0()); 
    }
ruleNLFORCED
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableTestAccess().getRowsTableTestRowParserRuleCall_9_1_0()); 
	    }
		lv_rows_12_0=ruleTableTestRow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableTestRule());
	        }
       		add(
       			$current, 
       			"rows",
        		lv_rows_12_0, 
        		"de.gebit.integrity.DSL.TableTestRow");
	        afterParserOrEnumRuleCall();
	    }

)
))+
    { 
        newCompositeNode(grammarAccess.getTableTestAccess().getNLFORCEDParserRuleCall_10()); 
    }
ruleNLFORCED
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTableTestRow
entryRuleTableTestRow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableTestRowRule()); }
	 iv_ruleTableTestRow=ruleTableTestRow 
	 { $current=$iv_ruleTableTestRow.current; } 
	 EOF 
;

// Rule TableTestRow
ruleTableTestRow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTableTestRowAccess().getTableTestRowAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTableTestRowAccess().getValuesParameterTableValueParserRuleCall_1_0()); 
	    }
		lv_values_1_0=ruleParameterTableValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableTestRowRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"de.gebit.integrity.DSL.ParameterTableValue");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleParameterTableHeader
entryRuleParameterTableHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterTableHeaderRule()); }
	 iv_ruleParameterTableHeader=ruleParameterTableHeader 
	 { $current=$iv_ruleParameterTableHeader.current; } 
	 EOF 
;

// Rule ParameterTableHeader
ruleParameterTableHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='|' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterTableHeaderAccess().getVerticalLineKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTableHeaderAccess().getNameParameterNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleParameterName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTableHeaderRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.gebit.integrity.DSL.ParameterName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterTableHeaderAccess().getVerticalLineKeyword_2());
    }
)?)
;





// Entry rule entryRuleResultTableHeader
entryRuleResultTableHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultTableHeaderRule()); }
	 iv_ruleResultTableHeader=ruleResultTableHeader 
	 { $current=$iv_ruleResultTableHeader.current; } 
	 EOF 
;

// Rule ResultTableHeader
ruleResultTableHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='|' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResultTableHeaderAccess().getVerticalLineKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResultTableHeaderAccess().getNameResultNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleResultName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultTableHeaderRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.gebit.integrity.DSL.ResultName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getResultTableHeaderAccess().getEqualsSignKeyword_2());
    }
(	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResultTableHeaderAccess().getVerticalLineKeyword_3());
    }
)?)
;





// Entry rule entryRuleParameterTableValue
entryRuleParameterTableValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterTableValueRule()); }
	 iv_ruleParameterTableValue=ruleParameterTableValue 
	 { $current=$iv_ruleParameterTableValue.current; } 
	 EOF 
;

// Rule ParameterTableValue
ruleParameterTableValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='|' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterTableValueAccess().getVerticalLineKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTableValueAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTableValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterTableValueAccess().getVerticalLineKeyword_2());
    }
)?)
;





// Entry rule entryRuleNamedResult
entryRuleNamedResult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedResultRule()); }
	 iv_ruleNamedResult=ruleNamedResult 
	 { $current=$iv_ruleNamedResult.current; } 
	 EOF 
;

// Rule NamedResult
ruleNamedResult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedResultAccess().getNameResultNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleResultName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedResultRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.ResultName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getNamedResultAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamedResultAccess().getEqualsSignKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getNamedResultAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedResultAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedResultRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleResultName
entryRuleResultName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultNameRule()); }
	 iv_ruleResultName=ruleResultName 
	 { $current=$iv_ruleResultName.current; } 
	 EOF 
;

// Rule ResultName
ruleResultName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getResultNameAccess().getFixedResultNameParserRuleCall_0()); 
    }
    this_FixedResultName_0=ruleFixedResultName
    { 
        $current = $this_FixedResultName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getResultNameAccess().getArbitraryParameterOrResultNameParserRuleCall_1()); 
    }
    this_ArbitraryParameterOrResultName_1=ruleArbitraryParameterOrResultName
    { 
        $current = $this_ArbitraryParameterOrResultName_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFixedResultName
entryRuleFixedResultName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixedResultNameRule()); }
	 iv_ruleFixedResultName=ruleFixedResultName 
	 { $current=$iv_ruleFixedResultName.current; } 
	 EOF 
;

// Rule FixedResultName
ruleFixedResultName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFixedResultNameRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFixedResultNameAccess().getFieldJvmFieldCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='call' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCallAccess().getCallKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getMultiplierExecutionMultiplierParserRuleCall_2_0_0()); 
	    }
		lv_multiplier_2_0=ruleExecutionMultiplier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"multiplier",
        		lv_multiplier_2_0, 
        		"de.gebit.integrity.DSL.ExecutionMultiplier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getDefinitionCallDefinitionCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_4_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParametersParameterParserRuleCall_4_1_0()); 
	    }
		lv_parameters_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"de.gebit.integrity.DSL.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_5_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getResultsNamedCallResultParserRuleCall_5_1_0()); 
	    }
		lv_results_8_0=ruleNamedCallResult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"results",
        		lv_results_8_0, 
        		"de.gebit.integrity.DSL.NamedCallResult");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_6_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_10='->' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCallAccess().getHyphenMinusGreaterThanSignKeyword_6_1());
    }

    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_6_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getResultVariableVariableParserRuleCall_6_3_0()); 
	    }
		lv_result_12_0=ruleVariableVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_12_0, 
        		"de.gebit.integrity.DSL.VariableVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))?
    { 
        newCompositeNode(grammarAccess.getCallAccess().getNLParserRuleCall_7()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamedCallResult
entryRuleNamedCallResult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedCallResultRule()); }
	 iv_ruleNamedCallResult=ruleNamedCallResult 
	 { $current=$iv_ruleNamedCallResult.current; } 
	 EOF 
;

// Rule NamedCallResult
ruleNamedCallResult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedCallResultAccess().getNameResultNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleResultName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedCallResultRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.ResultName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getNamedCallResultAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamedCallResultAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getNamedCallResultAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedCallResultAccess().getTargetVariableVariableParserRuleCall_4_0()); 
	    }
		lv_target_4_0=ruleVariableVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedCallResultRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_4_0, 
        		"de.gebit.integrity.DSL.VariableVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTimeSet
entryRuleTimeSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeSetRule()); }
	 iv_ruleTimeSet=ruleTimeSet 
	 { $current=$iv_ruleTimeSet.current; } 
	 EOF 
;

// Rule TimeSet
ruleTimeSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='timeset' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimeSetAccess().getTimesetKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(((
(
		lv_live_2_0=	'live' 
    {
        newLeafNode(lv_live_2_0, grammarAccess.getTimeSetAccess().getLiveLiveKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeSetRule());
	        }
       		setWithLastConsumed($current, "live", lv_live_2_0, "live");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_2_0_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeSetAccess().getStartTimeValueOrEnumValueOrOperationParserRuleCall_2_1_0_0_0()); 
	    }
		lv_startTime_4_0=ruleValueOrEnumValueOrOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeSetRule());
	        }
       		set(
       			$current, 
       			"startTime",
        		lv_startTime_4_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeSetAccess().getDiffTimeTimeDifferenceParserRuleCall_2_1_0_1_0()); 
	    }
		lv_diffTime_5_0=ruleTimeDifference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeSetRule());
	        }
       		set(
       			$current, 
       			"diffTime",
        		lv_diffTime_5_0, 
        		"de.gebit.integrity.DSL.TimeDifference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_2_1_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_progressionMode_7_0=	'progressing' 
    {
        newLeafNode(lv_progressionMode_7_0, grammarAccess.getTimeSetAccess().getProgressionModeProgressingKeyword_2_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeSetRule());
	        }
       		setWithLastConsumed($current, "progressionMode", lv_progressionMode_7_0, "progressing");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_2_1_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeSetAccess().getProgressionFactorTimeProgressionFactorParserRuleCall_2_1_2_2_0_0()); 
	    }
		lv_progressionFactor_9_0=ruleTimeProgressionFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeSetRule());
	        }
       		set(
       			$current, 
       			"progressionFactor",
        		lv_progressionFactor_9_0, 
        		"de.gebit.integrity.DSL.TimeProgressionFactor");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_2_1_2_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?)?))(	otherlv_11='on' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTimeSetAccess().getOnKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_3_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeSetRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTimeSetAccess().getForksForkDefinitionCrossReference_3_2_0_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_masterFork_14_0=	'master' 
    {
        newLeafNode(lv_masterFork_14_0, grammarAccess.getTimeSetAccess().getMasterForkMasterKeyword_3_2_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeSetRule());
	        }
       		setWithLastConsumed($current, "masterFork", lv_masterFork_14_0, "master");
	    }

)
))(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTimeSetAccess().getCommaKeyword_3_2_1());
    }
)?
    { 
        newCompositeNode(grammarAccess.getTimeSetAccess().getNLParserRuleCall_3_2_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+)?)
;





// Entry rule entryRuleTimeProgressionFactor
entryRuleTimeProgressionFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeProgressionFactorRule()); }
	 iv_ruleTimeProgressionFactor=ruleTimeProgressionFactor 
	 { $current=$iv_ruleTimeProgressionFactor.current; } 
	 EOF 
;

// Rule TimeProgressionFactor
ruleTimeProgressionFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fixedValue_0_0=RULE_MULTIPLIER
		{
			newLeafNode(lv_fixedValue_0_0, grammarAccess.getTimeProgressionFactorAccess().getFixedValueMULTIPLIERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeProgressionFactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fixedValue",
        		lv_fixedValue_0_0, 
        		"de.gebit.integrity.DSL.MULTIPLIER");
	    }

)
)
    |(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeProgressionFactorAccess().getCalculatedValueVariableParserRuleCall_1_0_0()); 
	    }
		lv_calculatedValue_1_1=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeProgressionFactorRule());
	        }
       		set(
       			$current, 
       			"calculatedValue",
        		lv_calculatedValue_1_1, 
        		"de.gebit.integrity.DSL.Variable");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTimeProgressionFactorAccess().getCalculatedValueOperationParserRuleCall_1_0_1()); 
	    }
		lv_calculatedValue_1_2=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeProgressionFactorRule());
	        }
       		set(
       			$current, 
       			"calculatedValue",
        		lv_calculatedValue_1_2, 
        		"de.gebit.integrity.DSL.Operation");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleTimeDifference
entryRuleTimeDifference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeDifferenceRule()); }
	 iv_ruleTimeDifference=ruleTimeDifference 
	 { $current=$iv_ruleTimeDifference.current; } 
	 EOF 
;

// Rule TimeDifference
ruleTimeDifference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_direction_0_1=	'+' 
    {
        newLeafNode(lv_direction_0_1, grammarAccess.getTimeDifferenceAccess().getDirectionPlusSignKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeDifferenceRule());
	        }
       		setWithLastConsumed($current, "direction", lv_direction_0_1, null);
	    }

    |		lv_direction_0_2=	'-' 
    {
        newLeafNode(lv_direction_0_2, grammarAccess.getTimeDifferenceAccess().getDirectionHyphenMinusKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeDifferenceRule());
	        }
       		setWithLastConsumed($current, "direction", lv_direction_0_2, null);
	    }

)

)
)((
    { 
        newCompositeNode(grammarAccess.getTimeDifferenceAccess().getNLParserRuleCall_1_0_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_fixedValues_2_0=RULE_TIMESPAN
		{
			newLeafNode(lv_fixedValues_2_0, grammarAccess.getTimeDifferenceAccess().getFixedValuesTIMESPANTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeDifferenceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"fixedValues",
        		lv_fixedValues_2_0, 
        		"de.gebit.integrity.DSL.TIMESPAN");
	    }

)
))+
    |(
    { 
        newCompositeNode(grammarAccess.getTimeDifferenceAccess().getNLParserRuleCall_1_1_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeDifferenceAccess().getCalculatedValueVariableParserRuleCall_1_1_1_0_0()); 
	    }
		lv_calculatedValue_4_1=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeDifferenceRule());
	        }
       		set(
       			$current, 
       			"calculatedValue",
        		lv_calculatedValue_4_1, 
        		"de.gebit.integrity.DSL.Variable");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTimeDifferenceAccess().getCalculatedValueOperationParserRuleCall_1_1_1_0_1()); 
	    }
		lv_calculatedValue_4_2=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeDifferenceRule());
	        }
       		set(
       			$current, 
       			"calculatedValue",
        		lv_calculatedValue_4_2, 
        		"de.gebit.integrity.DSL.Operation");
	        afterParserOrEnumRuleCall();
	    }

)

)
))))
;





// Entry rule entryRuleSuite
entryRuleSuite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteRule()); }
	 iv_ruleSuite=ruleSuite 
	 { $current=$iv_ruleSuite.current; } 
	 EOF 
;

// Rule Suite
ruleSuite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_inlined_0_0=	'inlined' 
    {
        newLeafNode(lv_inlined_0_0, grammarAccess.getSuiteAccess().getInlinedInlinedKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteRule());
	        }
       		setWithLastConsumed($current, "inlined", lv_inlined_0_0, "inlined");
	    }

)
)?	otherlv_1='suite' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSuiteAccess().getSuiteKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getMultiplierExecutionMultiplierParserRuleCall_3_0_0()); 
	    }
		lv_multiplier_3_0=ruleExecutionMultiplier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteRule());
	        }
       		set(
       			$current, 
       			"multiplier",
        		lv_multiplier_3_0, 
        		"de.gebit.integrity.DSL.ExecutionMultiplier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_3_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getDefinitionSuiteDefinitionCrossReference_4_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getParametersSuiteParameterParserRuleCall_6_0_0()); 
	    }
		lv_parameters_7_0=ruleSuiteParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_7_0, 
        		"de.gebit.integrity.DSL.SuiteParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_6_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getReturnSuiteReturnParserRuleCall_7_0_0()); 
	    }
		lv_return_9_0=ruleSuiteReturn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteRule());
	        }
       		add(
       			$current, 
       			"return",
        		lv_return_9_0, 
        		"de.gebit.integrity.DSL.SuiteReturn");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_7_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)*(	otherlv_11='on' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSuiteAccess().getOnKeyword_8_0());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_8_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getForkForkDefinitionCrossReference_8_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_8_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(	otherlv_15='in' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getSuiteAccess().getInKeyword_9_0());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_9_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getVariantsVariantDefinitionCrossReference_9_2_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSuiteAccess().getCommaKeyword_9_2_1());
    }
)?
    { 
        newCompositeNode(grammarAccess.getSuiteAccess().getNLParserRuleCall_9_2_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+)?)
;





// Entry rule entryRuleSuiteParameter
entryRuleSuiteParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteParameterRule()); }
	 iv_ruleSuiteParameter=ruleSuiteParameter 
	 { $current=$iv_ruleSuiteParameter.current; } 
	 EOF 
;

// Rule SuiteParameter
ruleSuiteParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteParameterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteParameterAccess().getNameVariableOrConstantEntityCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteParameterAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuiteParameterAccess().getColonKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteParameterAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteParameterAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSuiteReturn
entryRuleSuiteReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteReturnRule()); }
	 iv_ruleSuiteReturn=ruleSuiteReturn 
	 { $current=$iv_ruleSuiteReturn.current; } 
	 EOF 
;

// Rule SuiteReturn
ruleSuiteReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuiteReturnRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSuiteReturnAccess().getNameSuiteReturnDefinitionCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getSuiteReturnAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuiteReturnAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getSuiteReturnAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteReturnAccess().getTargetVariableVariableParserRuleCall_4_0()); 
	    }
		lv_target_4_0=ruleVariableVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteReturnRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_4_0, 
        		"de.gebit.integrity.DSL.VariableVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameParameterNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleParameterName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.gebit.integrity.DSL.ParameterName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getParameterAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterName
entryRuleParameterName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterNameRule()); }
	 iv_ruleParameterName=ruleParameterName 
	 { $current=$iv_ruleParameterName.current; } 
	 EOF 
;

// Rule ParameterName
ruleParameterName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterNameAccess().getFixedParameterNameParserRuleCall_0()); 
    }
    this_FixedParameterName_0=ruleFixedParameterName
    { 
        $current = $this_FixedParameterName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterNameAccess().getArbitraryParameterOrResultNameParserRuleCall_1()); 
    }
    this_ArbitraryParameterOrResultName_1=ruleArbitraryParameterOrResultName
    { 
        $current = $this_ArbitraryParameterOrResultName_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFixedParameterName
entryRuleFixedParameterName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixedParameterNameRule()); }
	 iv_ruleFixedParameterName=ruleFixedParameterName 
	 { $current=$iv_ruleFixedParameterName.current; } 
	 EOF 
;

// Rule FixedParameterName
ruleFixedParameterName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFixedParameterNameRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFixedParameterNameAccess().getAnnotationJvmAnnotationReferenceCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleArbitraryParameterOrResultName
entryRuleArbitraryParameterOrResultName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArbitraryParameterOrResultNameRule()); }
	 iv_ruleArbitraryParameterOrResultName=ruleArbitraryParameterOrResultName 
	 { $current=$iv_ruleArbitraryParameterOrResultName.current; } 
	 EOF 
;

// Rule ArbitraryParameterOrResultName
ruleArbitraryParameterOrResultName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArbitraryParameterOrResultNameAccess().getPlusSignKeyword_0());
    }
((
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getArbitraryParameterOrResultNameAccess().getIdentifierIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArbitraryParameterOrResultNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"de.gebit.integrity.DSL.ID");
	    }

)
)
    |(
(
		lv_stringIdentifier_2_0=RULE_STRING
		{
			newLeafNode(lv_stringIdentifier_2_0, grammarAccess.getArbitraryParameterOrResultNameAccess().getStringIdentifierSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArbitraryParameterOrResultNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringIdentifier",
        		lv_stringIdentifier_2_0, 
        		"de.gebit.integrity.DSL.STRING");
	    }

)
)))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getStandardOperationParserRuleCall_0()); 
    }
    this_StandardOperation_0=ruleStandardOperation
    { 
        $current = $this_StandardOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getCustomOperationParserRuleCall_1()); 
    }
    this_CustomOperation_1=ruleCustomOperation
    { 
        $current = $this_CustomOperation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStandardOperation
entryRuleStandardOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStandardOperationRule()); }
	 iv_ruleStandardOperation=ruleStandardOperation 
	 { $current=$iv_ruleStandardOperation.current; } 
	 EOF 
;

// Rule StandardOperation
ruleStandardOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStandardOperationAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStandardOperationAccess().getFirstOperandValueOrEnumValueOrOperationParserRuleCall_2_0()); 
	    }
		lv_firstOperand_2_0=ruleValueOrEnumValueOrOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStandardOperationRule());
	        }
       		set(
       			$current, 
       			"firstOperand",
        		lv_firstOperand_2_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
(
		lv_operators_4_1=	'+' 
    {
        newLeafNode(lv_operators_4_1, grammarAccess.getStandardOperationAccess().getOperatorsPlusSignKeyword_4_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStandardOperationRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_4_1, null);
	    }

    |		lv_operators_4_2=	'-' 
    {
        newLeafNode(lv_operators_4_2, grammarAccess.getStandardOperationAccess().getOperatorsHyphenMinusKeyword_4_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStandardOperationRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_4_2, null);
	    }

    |		lv_operators_4_3=	'*' 
    {
        newLeafNode(lv_operators_4_3, grammarAccess.getStandardOperationAccess().getOperatorsAsteriskKeyword_4_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStandardOperationRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_4_3, null);
	    }

    |		lv_operators_4_4=	'/' 
    {
        newLeafNode(lv_operators_4_4, grammarAccess.getStandardOperationAccess().getOperatorsSolidusKeyword_4_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStandardOperationRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_4_4, null);
	    }

    |		lv_operators_4_5=	'%' 
    {
        newLeafNode(lv_operators_4_5, grammarAccess.getStandardOperationAccess().getOperatorsPercentSignKeyword_4_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStandardOperationRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_4_5, null);
	    }

    |		lv_operators_4_6=	'..' 
    {
        newLeafNode(lv_operators_4_6, grammarAccess.getStandardOperationAccess().getOperatorsFullStopFullStopKeyword_4_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStandardOperationRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_4_6, null);
	    }

)

)
)
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getNLParserRuleCall_4_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStandardOperationAccess().getMoreOperandsValueOrEnumValueOrOperationParserRuleCall_4_2_0()); 
	    }
		lv_moreOperands_6_0=ruleValueOrEnumValueOrOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStandardOperationRule());
	        }
       		add(
       			$current, 
       			"moreOperands",
        		lv_moreOperands_6_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getStandardOperationAccess().getNLParserRuleCall_4_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStandardOperationAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleCustomOperation
entryRuleCustomOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomOperationRule()); }
	 iv_ruleCustomOperation=ruleCustomOperation 
	 { $current=$iv_ruleCustomOperation.current; } 
	 EOF 
;

// Rule CustomOperation
ruleCustomOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCustomOperationAccess().getLeftSquareBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getCustomOperationAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCustomOperationAccess().getPrefixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_2_0_0()); 
	    }
		lv_prefixOperand_2_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomOperationRule());
	        }
       		set(
       			$current, 
       			"prefixOperand",
        		lv_prefixOperand_2_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getCustomOperationAccess().getNLParserRuleCall_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCustomOperationAccess().getDefinitionOperationDefinitionCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCustomOperationAccess().getNLParserRuleCall_4_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_6='with' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCustomOperationAccess().getWithKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomOperationAccess().getPostfixOperandValueOrEnumValueOrOperationCollectionParserRuleCall_4_2_0()); 
	    }
		lv_postfixOperand_7_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomOperationRule());
	        }
       		set(
       			$current, 
       			"postfixOperand",
        		lv_postfixOperand_7_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))?
    { 
        newCompositeNode(grammarAccess.getCustomOperationAccess().getNLParserRuleCall_5()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCustomOperationAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleValueOrEnumValueOrOperationCollection
entryRuleValueOrEnumValueOrOperationCollection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationCollectionRule()); }
	 iv_ruleValueOrEnumValueOrOperationCollection=ruleValueOrEnumValueOrOperationCollection 
	 { $current=$iv_ruleValueOrEnumValueOrOperationCollection.current; } 
	 EOF 
;

// Rule ValueOrEnumValueOrOperationCollection
ruleValueOrEnumValueOrOperationCollection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationCollectionAccess().getValueValueOrEnumValueOrOperationParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleValueOrEnumValueOrOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueOrEnumValueOrOperationCollectionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationCollectionAccess().getNLParserRuleCall_1_0()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValueOrEnumValueOrOperationCollectionAccess().getCommaKeyword_1_1());
    }

    { 
        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationCollectionAccess().getNLParserRuleCall_1_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationCollectionAccess().getMoreValuesValueOrEnumValueOrOperationParserRuleCall_1_3_0()); 
	    }
		lv_moreValues_4_0=ruleValueOrEnumValueOrOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueOrEnumValueOrOperationCollectionRule());
	        }
       		add(
       			$current, 
       			"moreValues",
        		lv_moreValues_4_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleValueOrEnumValueOrOperation
entryRuleValueOrEnumValueOrOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationRule()); }
	 iv_ruleValueOrEnumValueOrOperation=ruleValueOrEnumValueOrOperation 
	 { $current=$iv_ruleValueOrEnumValueOrOperation.current; } 
	 EOF 
;

// Rule ValueOrEnumValueOrOperation
ruleValueOrEnumValueOrOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationAccess().getValueParserRuleCall_0()); 
    }
    this_Value_0=ruleValue
    { 
        $current = $this_Value_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationAccess().getEnumValueParserRuleCall_1()); 
    }
    this_EnumValue_1=ruleEnumValue
    { 
        $current = $this_EnumValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueOrEnumValueOrOperationAccess().getOperationParserRuleCall_2()); 
    }
    this_Operation_2=ruleOperation
    { 
        $current = $this_Operation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getStaticValueParserRuleCall_0()); 
    }
    this_StaticValue_0=ruleStaticValue
    { 
        $current = $this_StaticValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getVariableParserRuleCall_1()); 
    }
    this_Variable_1=ruleVariable
    { 
        $current = $this_Variable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNestedObjectParserRuleCall_2()); 
    }
    this_NestedObject_2=ruleNestedObject
    { 
        $current = $this_NestedObject_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getTypedNestedObjectParserRuleCall_3()); 
    }
    this_TypedNestedObject_3=ruleTypedNestedObject
    { 
        $current = $this_TypedNestedObject_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantValueAccess().getStaticValueParserRuleCall_0()); 
    }
    this_StaticValue_0=ruleStaticValue
    { 
        $current = $this_StaticValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantValueAccess().getConstantParserRuleCall_1()); 
    }
    this_Constant_1=ruleConstant
    { 
        $current = $this_Constant_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStaticValue
entryRuleStaticValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticValueRule()); }
	 iv_ruleStaticValue=ruleStaticValue 
	 { $current=$iv_ruleStaticValue.current; } 
	 EOF 
;

// Rule StaticValue
ruleStaticValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getRegexValueParserRuleCall_1()); 
    }
    this_RegexValue_1=ruleRegexValue
    { 
        $current = $this_RegexValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getIntegerValueParserRuleCall_2()); 
    }
    this_IntegerValue_2=ruleIntegerValue
    { 
        $current = $this_IntegerValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getDecimalValueParserRuleCall_3()); 
    }
    this_DecimalValue_3=ruleDecimalValue
    { 
        $current = $this_DecimalValue_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getBooleanValueParserRuleCall_4()); 
    }
    this_BooleanValue_4=ruleBooleanValue
    { 
        $current = $this_BooleanValue_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getDateValueParserRuleCall_5()); 
    }
    this_DateValue_5=ruleDateValue
    { 
        $current = $this_DateValue_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getTimeValueParserRuleCall_6()); 
    }
    this_TimeValue_6=ruleTimeValue
    { 
        $current = $this_TimeValue_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getDateAndTimeValueParserRuleCall_7()); 
    }
    this_DateAndTimeValue_7=ruleDateAndTimeValue
    { 
        $current = $this_DateAndTimeValue_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getNullValueParserRuleCall_8()); 
    }
    this_NullValue_8=ruleNullValue
    { 
        $current = $this_NullValue_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getInexistentValueParserRuleCall_9()); 
    }
    this_InexistentValue_9=ruleInexistentValue
    { 
        $current = $this_InexistentValue_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getEmptyValueParserRuleCall_10()); 
    }
    this_EmptyValue_10=ruleEmptyValue
    { 
        $current = $this_EmptyValue_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStaticValueAccess().getJavaConstantValueParserRuleCall_11()); 
    }
    this_JavaConstantValue_11=ruleJavaConstantValue
    { 
        $current = $this_JavaConstantValue_11.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	 iv_ruleIntegerValue=ruleIntegerValue 
	 { $current=$iv_ruleIntegerValue.current; } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_integerValue_0_0=RULE_INTEGER
		{
			newLeafNode(lv_integerValue_0_0, grammarAccess.getIntegerValueAccess().getIntegerValueINTEGERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"integerValue",
        		lv_integerValue_0_0, 
        		"de.gebit.integrity.DSL.INTEGER");
	    }

)
)
;





// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	 iv_ruleDecimalValue=ruleDecimalValue 
	 { $current=$iv_ruleDecimalValue.current; } 
	 EOF 
;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_decimalValue_0_0=RULE_DECIMAL
		{
			newLeafNode(lv_decimalValue_0_0, grammarAccess.getDecimalValueAccess().getDecimalValueDECIMALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecimalValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimalValue",
        		lv_decimalValue_0_0, 
        		"de.gebit.integrity.DSL.DECIMAL");
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_stringValue_0_0=RULE_STRING
		{
			newLeafNode(lv_stringValue_0_0, grammarAccess.getStringValueAccess().getStringValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_0_0, 
        		"de.gebit.integrity.DSL.STRING");
	    }

)
)
;





// Entry rule entryRuleRegexValue
entryRuleRegexValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegexValueRule()); }
	 iv_ruleRegexValue=ruleRegexValue 
	 { $current=$iv_ruleRegexValue.current; } 
	 EOF 
;

// Rule RegexValue
ruleRegexValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_regexValue_0_0=RULE_REGEX
		{
			newLeafNode(lv_regexValue_0_0, grammarAccess.getRegexValueAccess().getRegexValueREGEXTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegexValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"regexValue",
        		lv_regexValue_0_0, 
        		"de.gebit.integrity.DSL.REGEX");
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_booleanValue_0_1=RULE_BOOLEAN_TRUE
		{
			newLeafNode(lv_booleanValue_0_1, grammarAccess.getBooleanValueAccess().getBooleanValueBOOLEAN_TRUETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"booleanValue",
        		lv_booleanValue_0_1, 
        		"de.gebit.integrity.DSL.BOOLEAN_TRUE");
	    }

    |		lv_booleanValue_0_2=RULE_BOOLEAN_FALSE
		{
			newLeafNode(lv_booleanValue_0_2, grammarAccess.getBooleanValueAccess().getBooleanValueBOOLEAN_FALSETerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"booleanValue",
        		lv_booleanValue_0_2, 
        		"de.gebit.integrity.DSL.BOOLEAN_FALSE");
	    }

)

)
)
;





// Entry rule entryRuleDateValue
entryRuleDateValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateValueRule()); }
	 iv_ruleDateValue=ruleDateValue 
	 { $current=$iv_ruleDateValue.current; } 
	 EOF 
;

// Rule DateValue
ruleDateValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDateValueAccess().getIsoDateValueParserRuleCall_0()); 
    }
    this_IsoDateValue_0=ruleIsoDateValue
    { 
        $current = $this_IsoDateValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDateValueAccess().getEuropeanDateValueParserRuleCall_1()); 
    }
    this_EuropeanDateValue_1=ruleEuropeanDateValue
    { 
        $current = $this_EuropeanDateValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDateValueAccess().getUSDateValueParserRuleCall_2()); 
    }
    this_USDateValue_2=ruleUSDateValue
    { 
        $current = $this_USDateValue_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIsoDateValue
entryRuleIsoDateValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsoDateValueRule()); }
	 iv_ruleIsoDateValue=ruleIsoDateValue 
	 { $current=$iv_ruleIsoDateValue.current; } 
	 EOF 
;

// Rule IsoDateValue
ruleIsoDateValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dateValue_0_0=RULE_ISODATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getIsoDateValueAccess().getDateValueISODATETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsoDateValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.ISODATE");
	    }

)
)
;





// Entry rule entryRuleEuropeanDateValue
entryRuleEuropeanDateValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEuropeanDateValueRule()); }
	 iv_ruleEuropeanDateValue=ruleEuropeanDateValue 
	 { $current=$iv_ruleEuropeanDateValue.current; } 
	 EOF 
;

// Rule EuropeanDateValue
ruleEuropeanDateValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dateValue_0_0=RULE_EURODATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getEuropeanDateValueAccess().getDateValueEURODATETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEuropeanDateValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.EURODATE");
	    }

)
)
;





// Entry rule entryRuleUSDateValue
entryRuleUSDateValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUSDateValueRule()); }
	 iv_ruleUSDateValue=ruleUSDateValue 
	 { $current=$iv_ruleUSDateValue.current; } 
	 EOF 
;

// Rule USDateValue
ruleUSDateValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dateValue_0_0=RULE_USDATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getUSDateValueAccess().getDateValueUSDATETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUSDateValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.USDATE");
	    }

)
)
;





// Entry rule entryRuleTimeValue
entryRuleTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeValueRule()); }
	 iv_ruleTimeValue=ruleTimeValue 
	 { $current=$iv_ruleTimeValue.current; } 
	 EOF 
;

// Rule TimeValue
ruleTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTimeValueAccess().getIsoTimeValueParserRuleCall_0()); 
    }
    this_IsoTimeValue_0=ruleIsoTimeValue
    { 
        $current = $this_IsoTimeValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTimeValueAccess().getSimple24HrsTimeValueParserRuleCall_1()); 
    }
    this_Simple24HrsTimeValue_1=ruleSimple24HrsTimeValue
    { 
        $current = $this_Simple24HrsTimeValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTimeValueAccess().getSimple12HrsTimeValueParserRuleCall_2()); 
    }
    this_Simple12HrsTimeValue_2=ruleSimple12HrsTimeValue
    { 
        $current = $this_Simple12HrsTimeValue_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIsoTimeValue
entryRuleIsoTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsoTimeValueRule()); }
	 iv_ruleIsoTimeValue=ruleIsoTimeValue 
	 { $current=$iv_ruleIsoTimeValue.current; } 
	 EOF 
;

// Rule IsoTimeValue
ruleIsoTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_timeValue_0_0=RULE_ISOTIME
		{
			newLeafNode(lv_timeValue_0_0, grammarAccess.getIsoTimeValueAccess().getTimeValueISOTIMETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsoTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_0_0, 
        		"de.gebit.integrity.DSL.ISOTIME");
	    }

)
)
;





// Entry rule entryRuleSimple24HrsTimeValue
entryRuleSimple24HrsTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple24HrsTimeValueRule()); }
	 iv_ruleSimple24HrsTimeValue=ruleSimple24HrsTimeValue 
	 { $current=$iv_ruleSimple24HrsTimeValue.current; } 
	 EOF 
;

// Rule Simple24HrsTimeValue
ruleSimple24HrsTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_timeValue_0_0=RULE_TWENTYFOURHRSTIME
		{
			newLeafNode(lv_timeValue_0_0, grammarAccess.getSimple24HrsTimeValueAccess().getTimeValueTWENTYFOURHRSTIMETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple24HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_0_0, 
        		"de.gebit.integrity.DSL.TWENTYFOURHRSTIME");
	    }

)
)
;





// Entry rule entryRuleSimple12HrsTimeValue
entryRuleSimple12HrsTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple12HrsTimeValueRule()); }
	 iv_ruleSimple12HrsTimeValue=ruleSimple12HrsTimeValue 
	 { $current=$iv_ruleSimple12HrsTimeValue.current; } 
	 EOF 
;

// Rule Simple12HrsTimeValue
ruleSimple12HrsTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_timeValue_0_0=RULE_TWELVEHRSTIME
		{
			newLeafNode(lv_timeValue_0_0, grammarAccess.getSimple12HrsTimeValueAccess().getTimeValueTWELVEHRSTIMETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple12HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_0_0, 
        		"de.gebit.integrity.DSL.TWELVEHRSTIME");
	    }

)
)
;





// Entry rule entryRuleDateAndTimeValue
entryRuleDateAndTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateAndTimeValueRule()); }
	 iv_ruleDateAndTimeValue=ruleDateAndTimeValue 
	 { $current=$iv_ruleDateAndTimeValue.current; } 
	 EOF 
;

// Rule DateAndTimeValue
ruleDateAndTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDateAndTimeValueAccess().getIsoDateAndTimeValueParserRuleCall_0()); 
    }
    this_IsoDateAndTimeValue_0=ruleIsoDateAndTimeValue
    { 
        $current = $this_IsoDateAndTimeValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDateAndTimeValueAccess().getEuropeanDateAnd24HrsTimeValueParserRuleCall_1()); 
    }
    this_EuropeanDateAnd24HrsTimeValue_1=ruleEuropeanDateAnd24HrsTimeValue
    { 
        $current = $this_EuropeanDateAnd24HrsTimeValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDateAndTimeValueAccess().getEuropeanDateAnd12HrsTimeValueParserRuleCall_2()); 
    }
    this_EuropeanDateAnd12HrsTimeValue_2=ruleEuropeanDateAnd12HrsTimeValue
    { 
        $current = $this_EuropeanDateAnd12HrsTimeValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDateAndTimeValueAccess().getUSDateAnd12HrsTimeValueParserRuleCall_3()); 
    }
    this_USDateAnd12HrsTimeValue_3=ruleUSDateAnd12HrsTimeValue
    { 
        $current = $this_USDateAnd12HrsTimeValue_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIsoDateAndTimeValue
entryRuleIsoDateAndTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsoDateAndTimeValueRule()); }
	 iv_ruleIsoDateAndTimeValue=ruleIsoDateAndTimeValue 
	 { $current=$iv_ruleIsoDateAndTimeValue.current; } 
	 EOF 
;

// Rule IsoDateAndTimeValue
ruleIsoDateAndTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_dateValue_0_0=RULE_ISODATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getIsoDateAndTimeValueAccess().getDateValueISODATETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsoDateAndTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.ISODATE");
	    }

)
)(
(
		lv_timeValue_1_0=RULE_ISOTIME
		{
			newLeafNode(lv_timeValue_1_0, grammarAccess.getIsoDateAndTimeValueAccess().getTimeValueISOTIMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsoDateAndTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_1_0, 
        		"de.gebit.integrity.DSL.ISOTIME");
	    }

)
))
;





// Entry rule entryRuleEuropeanDateAnd24HrsTimeValue
entryRuleEuropeanDateAnd24HrsTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEuropeanDateAnd24HrsTimeValueRule()); }
	 iv_ruleEuropeanDateAnd24HrsTimeValue=ruleEuropeanDateAnd24HrsTimeValue 
	 { $current=$iv_ruleEuropeanDateAnd24HrsTimeValue.current; } 
	 EOF 
;

// Rule EuropeanDateAnd24HrsTimeValue
ruleEuropeanDateAnd24HrsTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_dateValue_0_0=RULE_EURODATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getEuropeanDateAnd24HrsTimeValueAccess().getDateValueEURODATETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEuropeanDateAnd24HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.EURODATE");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getEuropeanDateAnd24HrsTimeValueAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_timeValue_2_0=RULE_TWENTYFOURHRSTIME
		{
			newLeafNode(lv_timeValue_2_0, grammarAccess.getEuropeanDateAnd24HrsTimeValueAccess().getTimeValueTWENTYFOURHRSTIMETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEuropeanDateAnd24HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_2_0, 
        		"de.gebit.integrity.DSL.TWENTYFOURHRSTIME");
	    }

)
))
;





// Entry rule entryRuleEuropeanDateAnd12HrsTimeValue
entryRuleEuropeanDateAnd12HrsTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEuropeanDateAnd12HrsTimeValueRule()); }
	 iv_ruleEuropeanDateAnd12HrsTimeValue=ruleEuropeanDateAnd12HrsTimeValue 
	 { $current=$iv_ruleEuropeanDateAnd12HrsTimeValue.current; } 
	 EOF 
;

// Rule EuropeanDateAnd12HrsTimeValue
ruleEuropeanDateAnd12HrsTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_dateValue_0_0=RULE_EURODATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getEuropeanDateAnd12HrsTimeValueAccess().getDateValueEURODATETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEuropeanDateAnd12HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.EURODATE");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getEuropeanDateAnd12HrsTimeValueAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_timeValue_2_0=RULE_TWELVEHRSTIME
		{
			newLeafNode(lv_timeValue_2_0, grammarAccess.getEuropeanDateAnd12HrsTimeValueAccess().getTimeValueTWELVEHRSTIMETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEuropeanDateAnd12HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_2_0, 
        		"de.gebit.integrity.DSL.TWELVEHRSTIME");
	    }

)
))
;





// Entry rule entryRuleUSDateAnd12HrsTimeValue
entryRuleUSDateAnd12HrsTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUSDateAnd12HrsTimeValueRule()); }
	 iv_ruleUSDateAnd12HrsTimeValue=ruleUSDateAnd12HrsTimeValue 
	 { $current=$iv_ruleUSDateAnd12HrsTimeValue.current; } 
	 EOF 
;

// Rule USDateAnd12HrsTimeValue
ruleUSDateAnd12HrsTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_dateValue_0_0=RULE_USDATE
		{
			newLeafNode(lv_dateValue_0_0, grammarAccess.getUSDateAnd12HrsTimeValueAccess().getDateValueUSDATETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUSDateAnd12HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateValue",
        		lv_dateValue_0_0, 
        		"de.gebit.integrity.DSL.USDATE");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getUSDateAnd12HrsTimeValueAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_timeValue_2_0=RULE_TWELVEHRSTIME
		{
			newLeafNode(lv_timeValue_2_0, grammarAccess.getUSDateAnd12HrsTimeValueAccess().getTimeValueTWELVEHRSTIMETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUSDateAnd12HrsTimeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeValue",
        		lv_timeValue_2_0, 
        		"de.gebit.integrity.DSL.TWELVEHRSTIME");
	    }

)
))
;





// Entry rule entryRuleJavaConstantValue
entryRuleJavaConstantValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaConstantValueRule()); }
	 iv_ruleJavaConstantValue=ruleJavaConstantValue 
	 { $current=$iv_ruleJavaConstantValue.current; } 
	 EOF 
;

// Rule JavaConstantValue
ruleJavaConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJavaConstantValueAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaConstantValueAccess().getConstantJavaConstantReferenceParserRuleCall_1_0()); 
	    }
		lv_constant_1_0=ruleJavaConstantReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaConstantValueRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_1_0, 
        		"de.gebit.integrity.DSL.JavaConstantReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJavaConstantValueAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getNameVariableOrConstantEntityCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getNumberSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getAttributeQualifiedNameParserRuleCall_1_1_0()); 
	    }
		lv_attribute_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_2_0, 
        		"de.gebit.integrity.DSL.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariableVariable
entryRuleVariableVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableVariableRule()); }
	 iv_ruleVariableVariable=ruleVariableVariable 
	 { $current=$iv_ruleVariableVariable.current; } 
	 EOF 
;

// Rule VariableVariable
ruleVariableVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableVariableRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableVariableAccess().getNameVariableEntityCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getNameConstantEntityCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNullValue
entryRuleNullValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullValueRule()); }
	 iv_ruleNullValue=ruleNullValue 
	 { $current=$iv_ruleNullValue.current; } 
	 EOF 
;

// Rule NullValue
ruleNullValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullValueAccess().getNullAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullValueAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleInexistentValue
entryRuleInexistentValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInexistentValueRule()); }
	 iv_ruleInexistentValue=ruleInexistentValue 
	 { $current=$iv_ruleInexistentValue.current; } 
	 EOF 
;

// Rule InexistentValue
ruleInexistentValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInexistentValueAccess().getInexistentAction_0(),
            $current);
    }
)	otherlv_1='inexistent' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInexistentValueAccess().getInexistentKeyword_1());
    }
)
;





// Entry rule entryRuleEmptyValue
entryRuleEmptyValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyValueRule()); }
	 iv_ruleEmptyValue=ruleEmptyValue 
	 { $current=$iv_ruleEmptyValue.current; } 
	 EOF 
;

// Rule EmptyValue
ruleEmptyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyValueAccess().getEmptyAction_0(),
            $current);
    }
)	otherlv_1='empty' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmptyValueAccess().getEmptyKeyword_1());
    }
)
;





// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	 iv_ruleEnumValue=ruleEnumValue 
	 { $current=$iv_ruleEnumValue.current; } 
	 EOF 
;

// Rule EnumValue
ruleEnumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValueRule());
	        }
        }
	otherlv_0=RULE_UPPERCASE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEnumValueAccess().getEnumValueJvmEnumerationLiteralCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNestedObject
entryRuleNestedObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedObjectRule()); }
	 iv_ruleNestedObject=ruleNestedObject 
	 { $current=$iv_ruleNestedObject.current; } 
	 EOF 
;

// Rule NestedObject
ruleNestedObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNestedObjectAccess().getLeftCurlyBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNestedObjectAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNestedObjectAccess().getAttributesKeyValuePairParserRuleCall_2_0_0()); 
	    }
		lv_attributes_2_0=ruleKeyValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedObjectRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"de.gebit.integrity.DSL.KeyValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getNestedObjectAccess().getNLParserRuleCall_2_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNestedObjectAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTypedNestedObject
entryRuleTypedNestedObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedNestedObjectRule()); }
	 iv_ruleTypedNestedObject=ruleTypedNestedObject 
	 { $current=$iv_ruleTypedNestedObject.current; } 
	 EOF 
;

// Rule TypedNestedObject
ruleTypedNestedObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedNestedObjectAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedNestedObjectAccess().getTypeJavaClassReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleJavaClassReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedNestedObjectRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"de.gebit.integrity.DSL.JavaClassReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedNestedObjectAccess().getGreaterThanSignKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getTypedNestedObjectAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedNestedObjectAccess().getNestedObjectNestedObjectParserRuleCall_4_0()); 
	    }
		lv_nestedObject_4_0=ruleNestedObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedNestedObjectRule());
	        }
       		set(
       			$current, 
       			"nestedObject",
        		lv_nestedObject_4_0, 
        		"de.gebit.integrity.DSL.NestedObject");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleKeyValuePair
entryRuleKeyValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyValuePairRule()); }
	 iv_ruleKeyValuePair=ruleKeyValuePair 
	 { $current=$iv_ruleKeyValuePair.current; } 
	 EOF 
;

// Rule KeyValuePair
ruleKeyValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getKeyValuePairAccess().getIdentifierIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyValuePairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"de.gebit.integrity.DSL.ID");
	    }

)
)
    |(
(
		lv_stringIdentifier_1_0=RULE_STRING
		{
			newLeafNode(lv_stringIdentifier_1_0, grammarAccess.getKeyValuePairAccess().getStringIdentifierSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyValuePairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringIdentifier",
        		lv_stringIdentifier_1_0, 
        		"de.gebit.integrity.DSL.STRING");
	    }

)
))
    { 
        newCompositeNode(grammarAccess.getKeyValuePairAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyValuePairAccess().getColonKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getKeyValuePairAccess().getNLParserRuleCall_3()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyValuePairAccess().getValueValueOrEnumValueOrOperationCollectionParserRuleCall_4_0()); 
	    }
		lv_value_5_0=ruleValueOrEnumValueOrOperationCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyValuePairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"de.gebit.integrity.DSL.ValueOrEnumValueOrOperationCollection");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJavaClassReference
entryRuleJavaClassReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaClassReferenceRule()); }
	 iv_ruleJavaClassReference=ruleJavaClassReference 
	 { $current=$iv_ruleJavaClassReference.current; } 
	 EOF 
;

// Rule JavaClassReference
ruleJavaClassReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaClassReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJavaClassReferenceAccess().getTypeJvmTypeCrossReference_0()); 
	    }
		ruleQualifiedJavaClassName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMethodReference
entryRuleMethodReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodReferenceRule()); }
	 iv_ruleMethodReference=ruleMethodReference 
	 { $current=$iv_ruleMethodReference.current; } 
	 EOF 
;

// Rule MethodReference
ruleMethodReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMethodReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedJavaClassName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodReferenceAccess().getNumberSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodReferenceRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMethodReferenceAccess().getMethodJvmOperationCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleJavaConstantReference
entryRuleJavaConstantReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaConstantReferenceRule()); }
	 iv_ruleJavaConstantReference=ruleJavaConstantReference 
	 { $current=$iv_ruleJavaConstantReference.current; } 
	 EOF 
;

// Rule JavaConstantReference
ruleJavaConstantReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaConstantReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJavaConstantReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedJavaClassName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJavaConstantReferenceAccess().getNumberSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaConstantReferenceRule());
	        }
        }
	otherlv_2=RULE_UPPERCASE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getJavaConstantReferenceAccess().getConstantJvmFieldCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleExecutionMultiplier
entryRuleExecutionMultiplier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecutionMultiplierRule()); }
	 iv_ruleExecutionMultiplier=ruleExecutionMultiplier 
	 { $current=$iv_ruleExecutionMultiplier.current; } 
	 EOF 
;

// Rule ExecutionMultiplier
ruleExecutionMultiplier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExecutionMultiplierAccess().getCountConstantValueParserRuleCall_0_0()); 
	    }
		lv_count_0_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecutionMultiplierRule());
	        }
       		set(
       			$current, 
       			"count",
        		lv_count_0_0, 
        		"de.gebit.integrity.DSL.ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExecutionMultiplierAccess().getAsteriskKeyword_1());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedJavaClassName
entryRuleQualifiedJavaClassName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedJavaClassNameRule()); } 
	 iv_ruleQualifiedJavaClassName=ruleQualifiedJavaClassName 
	 { $current=$iv_ruleQualifiedJavaClassName.current.getText(); }  
	 EOF 
;

// Rule QualifiedJavaClassName
ruleQualifiedJavaClassName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedJavaClassNameAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedJavaClassNameAccess().getFullStopKeyword_1()); 
    }
    this_UPPERCASE_ID_2=RULE_UPPERCASE_ID    {
		$current.merge(this_UPPERCASE_ID_2);
    }

    { 
    newLeafNode(this_UPPERCASE_ID_2, grammarAccess.getQualifiedJavaClassNameAccess().getUPPERCASE_IDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleDocumentationComment
entryRuleDocumentationComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentationCommentRule()); }
	 iv_ruleDocumentationComment=ruleDocumentationComment 
	 { $current=$iv_ruleDocumentationComment.current; } 
	 EOF 
;

// Rule DocumentationComment
ruleDocumentationComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_content_0_0=RULE_ML_DOC_COMMENT
		{
			newLeafNode(lv_content_0_0, grammarAccess.getDocumentationCommentAccess().getContentML_DOC_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDocumentationCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"de.gebit.integrity.DSL.ML_DOC_COMMENT");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getDocumentationCommentAccess().getNLParserRuleCall_1()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNL
entryRuleNL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNLRule()); } 
	 iv_ruleNL=ruleNL 
	 { $current=$iv_ruleNL.current.getText(); }  
	 EOF 
;

// Rule NL
ruleNL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NEWLINE_0=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_0);
    }

    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getNLAccess().getNEWLINETerminalRuleCall_0()); 
    }
(    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    newLeafNode(this_WS_1, grammarAccess.getNLAccess().getWSTerminalRuleCall_1()); 
    }
)?)*
    ;





// Entry rule entryRuleNLFORCED
entryRuleNLFORCED returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNLFORCEDRule()); } 
	 iv_ruleNLFORCED=ruleNLFORCED 
	 { $current=$iv_ruleNLFORCED.current.getText(); }  
	 EOF 
;

// Rule NLFORCED
ruleNLFORCED returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NEWLINE_0=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_0);
    }

    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getNLFORCEDAccess().getNEWLINETerminalRuleCall_0()); 
    }
(    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    newLeafNode(this_WS_1, grammarAccess.getNLFORCEDAccess().getWSTerminalRuleCall_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getNLFORCEDAccess().getNLParserRuleCall_2()); 
    }
    this_NL_2=ruleNL    {
		$current.merge(this_NL_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





RULE_BOOLEAN_TRUE : 'true';

RULE_BOOLEAN_FALSE : 'false';

RULE_UPPERCASE_ID : 'A'..'Z' ('A'..'Z'|'a'..'z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INTEGER : '-'? ('0'..'9')+;

RULE_DECIMAL : '-'? ('0'..'9')+ '.' ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_REGEX : '~' ('~~'|~(('~~'|'~')))* '~';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))*;

RULE_SL_VISIBLE_COMMENT : '-- ' ~(('\n'|'\r'))*;

RULE_SL_VISIBLE_TITLE_COMMENT : '--- ' ~(('\n'|'\r'))*;

RULE_ML_VISIBLE_COMMENT : '/- ' ( options {greedy=false;} : . )*'-/';

RULE_ML_VISIBLE_TITLE_COMMENT : '/-- ' ( options {greedy=false;} : . )*'--/';

RULE_ML_DOC_COMMENT : '/**' ( options {greedy=false;} : . )*'*/';

RULE_DIVIDER : '----' '-'*;

RULE_WS : (' '|'\t')+;

RULE_NEWLINE : ('\r'|'\n')+;

RULE_ISODATE : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'1' '0'..'9' '-' '0'..'3' '0'..'9';

RULE_ISOTIME : ('T' RULE_TWENTYFOURHRSTIME RULE_ISOTIMEZONE?|RULE_TWENTYFOURHRSTIME RULE_ISOTIMEZONE);

fragment RULE_ISOTIMEZONE : ('Z'|('+'|'-') '0'..'2' '0'..'9' ':'? '0'..'5' '0'..'9');

RULE_EURODATE : '0'..'3' '0'..'9' '.' '0'..'1' '0'..'9' '.' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

RULE_USDATE : '0'..'1' '0'..'9' '/' '0'..'3' '0'..'9' '/' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

RULE_TWENTYFOURHRSTIME : '0'..'2' '0'..'9' ':' '0'..'5' '0'..'9' (':' '0'..'6' '0'..'9' ('.' '0'..'9' '0'..'9' '0'..'9')?)?;

RULE_TWELVEHRSTIME : '0'..'1' '0'..'9' ':' '0'..'5' '0'..'9' (':' '0'..'6' '0'..'9' ('.' '0'..'9' '0'..'9' '0'..'9')?)? ('am'|'pm');

RULE_TIMESPAN : ('0'..'9')+ ('y'|'year'|'years'|'mon'|'month'|'months'|'d'|'day'|'days'|'h'|'hour'|'hours'|'m'|'minute'|'minutes'|'s'|'second'|'seconds'|'ms'|'millisecond'|'milliseconds');

RULE_MULTIPLIER : ('0'..'9')+ ('.' ('0'..'9')+)? 'x';

RULE_ANY_OTHER : .;


