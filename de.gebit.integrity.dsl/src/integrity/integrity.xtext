/*******************************************************************************
 * Copyright (c) 2012, 2013 Rene Schneider, GEBIT Solutions GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar de.gebit.integrity.DSL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate dsl "http://integrity.dsl"

/* This is the Integrity grammar. It's basically just another XText grammar definition, but with one specialty: since
 * the Integrity language needs to use line breaks as syntactically relevant elements in one specific place (in order to
 * split lines of tabletest tables), the whole grammar is "newline-aware", although it actually allows optional newlines
 * at pretty much ANY place where whitespace and newlines are usually allowed (except the mentioned tabletest lines, 
 * where newlines are not only allowed, but required!). This is done by explicitly stating all the places where newlines
 * are allowed, but not required (the NL rule), as well as the places where newlines are forced and used as a syntactically
 * relevant element (NLFORCED rule). 
 * 
 * This works rather well in practice, although one sometimes needs to put some additional effort into the integration of new
 * syntactical elements, especially considering content assist and autoformatting.
 */

Model:
	{Model} NL (imports+=Import NL)* statements+=Statement*;
	
Statement:
	PackageDefinition | ForkDefinition | VariantDefinition;
	
VisibleComment:
	VisibleSingleLineComment | VisibleMultiLineComment;
	
VisibleSingleLineComment:
	VisibleSingleLineNormalComment | VisibleSingleLineTitleComment;
	
VisibleSingleLineNormalComment:
	content=SL_VISIBLE_COMMENT NL;
	
VisibleSingleLineTitleComment:
	content=SL_VISIBLE_TITLE_COMMENT NL;
	
VisibleMultiLineComment:
	VisibleMultiLineNormalComment | VisibleMultiLineTitleComment;
	
VisibleMultiLineNormalComment:
	content=ML_VISIBLE_COMMENT NL;
	
VisibleMultiLineTitleComment:
	content=ML_VISIBLE_TITLE_COMMENT NL;
	
VisibleDivider:
	content=DIVIDER NL;
	
PackageDefinition:
	documentation=DocumentationComment? 'packagedef' NL name=QualifiedName 'with' NL statements+=PackageStatement* 'packageend' NL;
	
PackageStatement:
	ForkDefinition | VariantDefinition | TestDefinition | CallDefinition | OperationDefinition | SuiteDefinition | VariableDefinition | ConstantDefinition;

Import:
	'import' NL importedNamespace=QualifiedNameWithWildcard;
	
ForkDefinition:
	documentation=DocumentationComment? private='private'? 'forkdef' NL name=QualifiedName NL (description=STRING NL)? ((('uses' NL forkerClass=JavaClassReference) | ('based on' NL baseFork=[ForkDefinition|QualifiedName])) NL)? (parameters+=ForkParameter NL)*;
	
ForkParameter:
	name=FixedParameterName NL ':' NL value=ValueOrEnumValueOrOperation;
	
VariantDefinition:
	documentation=DocumentationComment? 'variantdef' NL name=QualifiedName NL (description=STRING NL)?;
	
TestDefinition:
	documentation=DocumentationComment? 'testdef' NL name=QualifiedName NL 'uses' NL fixtureMethod=MethodReference NL;
	
CallDefinition:
	documentation=DocumentationComment? 'calldef' NL name=QualifiedName NL 'uses' NL fixtureMethod=MethodReference NL;
	
SuiteDefinition:
	documentation=DocumentationComment? private='private'? singleRun='single-run'? inlined='inlined'? 'suitedef' NL name=QualifiedName NL ('gets' (parameters+=SuiteParameterDefinition NL)+)? ('returns' (return+=SuiteReturnDefinition NL)+)? ('requires' NL (dependencies+=[SuiteDefinition|QualifiedName] NL)*)? ('concludedby' NL (finalizers+=[SuiteDefinition|QualifiedName] NL)*)? 'with' NL (statements+=SuiteStatement)* 'suiteend' NL;
	
SuiteParameterDefinition:
	name=VariableEntity (NL 'by default' default=ValueOrEnumValueOrOperationCollection)?;
	
SuiteReturnDefinition:
	name=VariableEntity;

OperationDefinition:
	'operationdef' NL name=QualifiedName NL 'uses' NL operationType=JavaClassReference NL;

SuiteStatement:
	SuiteStatementWithResult | VariableDefinition | ConstantDefinition | VariableAssignment | VisibleComment | VisibleDivider;
	
SuiteStatementWithResult:
	Suite | Test | TableTest | Call | TimeSet;
	
VariableDefinition:
	private='private'? 'variable' NL name=VariableEntity NL ('initially' NL initialValue=ValueOrEnumValueOrOperationCollection NL)?;
	
ConstantDefinition:
	documentation=DocumentationComment? private='private'? 'constant' NL name=ConstantEntity NL ((value=ValueOrEnumValueOrOperationCollection NL)? (variantValues+=VariantValue NL)*) (parameterized='parameterized' NL)?;
	
VariableAssignment:
	'assign' NL value=ValueOrEnumValueOrOperationCollection NL '->' NL target=VariableVariable NL;
	
VariantValue:
	'in' NL (names+=[VariantDefinition|QualifiedName] NL)+ ':' NL value=ValueOrEnumValueOrOperationCollection;
	
VariableEntity:
	name=QualifiedName;
	
ConstantEntity:
	name=QualifiedName;
	
VariableOrConstantEntity:
	VariableEntity | ConstantEntity;
		
Test:
	checkpoint='checkpoint'? 'test' NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedResult)* (NL '=' NL result=ValueOrEnumValueOrOperationCollection)? NL;
	
TableTest:
	'tabletest' NL definition=[TestDefinition|QualifiedName] (NL parameters+=Parameter)* NLFORCED
		(parameterHeaders+=ParameterTableHeader)* (resultHeaders+=ResultTableHeader)* '|' (defaultResultColumn='=' '|')?  (NLFORCED rows+=TableTestRow)+ NLFORCED;
		
TableTestRow:
	{TableTestRow} (values+=ParameterTableValue)+;
	
ParameterTableHeader:
	'|' name=ParameterName '|'?;
	
ResultTableHeader:
	'|' name=ResultName '=' '|'?;
	
ParameterTableValue:
	'|' value=ValueOrEnumValueOrOperationCollection '|'?;
		
NamedResult:
	name=ResultName NL '=' NL value=ValueOrEnumValueOrOperationCollection;
	
ResultName:
	FixedResultName | ArbitraryParameterOrResultName;
	
FixedResultName:
	field=[jvmTypes::JvmField|ID];
	
Call:
	'call' NL (multiplier=ExecutionMultiplier NL)? definition=[CallDefinition|QualifiedName] (NL parameters+=Parameter)* (NL results+=NamedCallResult)* (NL '->' NL result=VariableVariable)? NL;
	
NamedCallResult:
	name=ResultName NL '->' NL target=VariableVariable;
	
TimeSet:
	'timeset' NL (live='live' NL | ((startTime=ValueOrEnumValueOrOperation | diffTime=TimeDifference) NL (progressionMode='progressing' NL (progressionFactor=TimeProgressionFactor NL)?)?)) ('on' NL ((forks+=[ForkDefinition|QualifiedName] | masterFork='master') ','? NL)+)?;

TimeProgressionFactor:
	fixedValue=MULTIPLIER | calculatedValue=(Variable | Operation);

TimeDifference:
	// In case of calculated values for time differences, those are assumed to be in msecs
	direction=('+'|'-') ((NL fixedValues+=TIMESPAN)+ | (NL calculatedValue=(Variable | Operation)));
	
Suite:
	inlined='inlined'? 'suite' NL (multiplier=ExecutionMultiplier NL)? definition=[SuiteDefinition|QualifiedName] NL (parameters+=SuiteParameter NL)* (return+=SuiteReturn NL)* ('on' NL fork=[ForkDefinition|QualifiedName] NL)? ('in' NL (variants+=[VariantDefinition|QualifiedName] ','? NL)+)?;

SuiteParameter:
	name=[VariableOrConstantEntity|QualifiedName] NL ':' NL value=ValueOrEnumValueOrOperationCollection;
	
SuiteReturn:
	name=[SuiteReturnDefinition|QualifiedName] NL '->' NL target=VariableVariable;

Parameter:
	name=ParameterName NL ':' NL value=ValueOrEnumValueOrOperationCollection;
	
ParameterName:
	FixedParameterName | ArbitraryParameterOrResultName;
	
FixedParameterName:
	annotation=[jvmTypes::JvmAnnotationReference|ID];

ArbitraryParameterOrResultName:
	'+' (identifier=ID | stringIdentifier=STRING);
	
Operation:
	StandardOperation | CustomOperation;
	
StandardOperation:
	'(' NL firstOperand=ValueOrEnumValueOrOperation NL (operators+=('+'|'-'|'*'|'/'|'%'|'..') NL moreOperands+=ValueOrEnumValueOrOperation NL)+ ')';
	
CustomOperation:
	'[' NL (prefixOperand=ValueOrEnumValueOrOperationCollection NL)? definition=[OperationDefinition|QualifiedName] (NL 'with' postfixOperand=ValueOrEnumValueOrOperationCollection)? NL ']';
	
ValueOrEnumValueOrOperationCollection:
	value=ValueOrEnumValueOrOperation (NL ',' NL moreValues+=ValueOrEnumValueOrOperation)*;
	
ValueOrEnumValueOrOperation:
	Value | EnumValue | Operation;
	
Value:
	StaticValue | Variable | NestedObject | TypedNestedObject;
	
ConstantValue:
	StaticValue | Constant;
	
StaticValue:
	StringValue | RegexValue | IntegerValue | DecimalValue | BooleanValue | DateValue | TimeValue | DateAndTimeValue | NullValue | InexistentValue | EmptyValue | JavaConstantValue;
	
IntegerValue:
	integerValue=INTEGER;
	
DecimalValue:
	decimalValue=DECIMAL;
	
StringValue:
	stringValue=STRING;
	
RegexValue:
	regexValue=REGEX;
	
BooleanValue:
	booleanValue=(BOOLEAN_TRUE | BOOLEAN_FALSE);
	
DateValue:
	IsoDateValue | EuropeanDateValue | USDateValue;
	
IsoDateValue:
	dateValue=ISODATE;
	
EuropeanDateValue:
	dateValue=EURODATE;
	
USDateValue:
	dateValue=USDATE;
	
TimeValue:
	IsoTimeValue | Simple24HrsTimeValue | Simple12HrsTimeValue;

IsoTimeValue:
	timeValue=ISOTIME;
	
Simple24HrsTimeValue:
	timeValue=TWENTYFOURHRSTIME;
	
Simple12HrsTimeValue:
	timeValue=TWELVEHRSTIME;
	
DateAndTimeValue:
	IsoDateAndTimeValue | EuropeanDateAnd24HrsTimeValue | EuropeanDateAnd12HrsTimeValue | USDateAnd12HrsTimeValue;
	
IsoDateAndTimeValue:
	dateValue=ISODATE timeValue=ISOTIME;
	
EuropeanDateAnd24HrsTimeValue:
	dateValue=EURODATE NL timeValue=TWENTYFOURHRSTIME;
	
EuropeanDateAnd12HrsTimeValue:
	dateValue=EURODATE NL timeValue=TWELVEHRSTIME;
	
USDateAnd12HrsTimeValue:
	dateValue=USDATE NL timeValue=TWELVEHRSTIME;
	
JavaConstantValue:
	'<' constant=JavaConstantReference '>';
	
Variable:
	name=[VariableOrConstantEntity|QualifiedName] ('#' attribute=QualifiedName)?;
	
VariableVariable:
	name=[VariableEntity|QualifiedName];
	
Constant:
	name=[ConstantEntity|QualifiedName];
	
NullValue:
	{Null} 'null';
	
InexistentValue:
	{Inexistent} 'inexistent';
	
EmptyValue:
	{Empty} 'empty';
	
EnumValue:
	enumValue=[jvmTypes::JvmEnumerationLiteral|UPPERCASE_ID];
	
NestedObject:
	'{' NL (attributes+=KeyValuePair NL)+ '}';
	
TypedNestedObject:
	'<' type=JavaClassReference '>' NL nestedObject=NestedObject;
	
KeyValuePair:
	(identifier=ID | stringIdentifier=STRING) NL ':' NL value=ValueOrEnumValueOrOperationCollection;
	
JavaClassReference:
	type=[jvmTypes::JvmType|QualifiedJavaClassName];
	
MethodReference:
	type=[jvmTypes::JvmType|QualifiedJavaClassName] '#' method=[jvmTypes::JvmOperation];
	
JavaConstantReference:
	type=[jvmTypes::JvmType|QualifiedJavaClassName] '#' constant=[jvmTypes::JvmField|UPPERCASE_ID];
	
ExecutionMultiplier:
	count=ConstantValue '*';
	
QualifiedName:
	ID('.'ID)*;
	
QualifiedJavaClassName:
	QualifiedName '.' UPPERCASE_ID;
	
QualifiedNameWithWildcard:
  	QualifiedName '.*'?;
  	
DocumentationComment:
	content=ML_DOC_COMMENT NL;
  	
NL:
	(NEWLINE WS?)*;
	
NLFORCED:
	NEWLINE WS? NL;


terminal BOOLEAN_TRUE: 'true';
terminal BOOLEAN_FALSE: 'false';
terminal UPPERCASE_ID: ('A'..'Z') ('A'..'Z'|'a'..'z'|'_'|'0'..'9')*;
terminal ID: '^'?('a'..'z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INTEGER returns ecore::EBigInteger: '-'? ('0'..'9')+;
terminal DECIMAL returns ecore::EBigDecimal: '-'? ('0'..'9')+ '.' ('0'..'9')+;
terminal STRING: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
terminal REGEX: '~' ( '~~' | !('~~'|'~') )* '~';
terminal ML_COMMENT: '/*' !('*') -> '*/';
terminal SL_COMMENT: '//' !('\n'|'\r')*;
terminal SL_VISIBLE_COMMENT: '-- ' !('\n'|'\r')*;
terminal SL_VISIBLE_TITLE_COMMENT: '--- ' !('\n'|'\r')*;
terminal ML_VISIBLE_COMMENT: '/- ' -> '-/';
terminal ML_VISIBLE_TITLE_COMMENT: '/-- ' -> '--/';
terminal ML_DOC_COMMENT: '/**' -> '*/';
terminal DIVIDER: '----' ('-')*;

terminal WS: (' '|'\t')+;
terminal NEWLINE: ('\r'|'\n')+;

terminal ISODATE: ('0'..'9')('0'..'9')('0'..'9')('0'..'9') '-' ('0'..'1')('0'..'9') '-' ('0'..'3')('0'..'9');
terminal ISOTIME: ('T' TWENTYFOURHRSTIME ISOTIMEZONE?) | (TWENTYFOURHRSTIME ISOTIMEZONE);
terminal ISOTIMEZONE: 'Z' | (('+' | '-') ('0'..'2')('0'..'9') ':'? ('0'..'5')('0'..'9'));

terminal EURODATE: ('0'..'3')('0'..'9') '.' ('0'..'1')('0'..'9') '.' ('0'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal USDATE: ('0'..'1')('0'..'9') '/' ('0'..'3')('0'..'9') '/' ('0'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal TWENTYFOURHRSTIME: ('0'..'2')('0'..'9') ':' ('0'..'5')('0'..'9') (':' ('0'..'6')('0'..'9') ('.' (('0'..'9')('0'..'9')('0'..'9')))?)?;
terminal TWELVEHRSTIME: ('0'..'1')('0'..'9') ':' ('0'..'5')('0'..'9') (':' ('0'..'6')('0'..'9') ('.' (('0'..'9')('0'..'9')('0'..'9')))?)? ('am'|'pm');

// Making the following a terminal is a trick so we don't have to make all those units into keywords
terminal TIMESPAN: ('0'..'9')+ ('y'|'year'|'years'|'mon'|'month'|'months'|'d'|'day'|'days'|'h'|'hour'|'hours'|'m'|'minute'|'minutes'|'s'|'second'|'seconds'|'ms'|'millisecond'|'milliseconds');
terminal MULTIPLIER: ('0'..'9')+ ('.' ('0'..'9')+)? 'x';


terminal ANY_OTHER: .;