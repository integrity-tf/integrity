import integrity.fixtures.basic.arbitrary.echo
import integrity.fixtures.basic.noop.*

packagedef integrity.basic.nestedobjects with

	suitedef nestedobjects with
	
		variable stringVar initially "A String in a Variable"
	
		variable obj1 initially {
			key1: "The first value"
			key2: 31337, 31338
			key3: 123.456
			"key4": true
			"key5": null
			"key6": {
				subkey1: stringVar
				subkey2: {
					subsubkey1: 10000
				}
			}
		}
		
		variable obj2
		
		call echoMap map: {
				key1: "The first value"
				key2: 31337, 31338
				key3: 123.456
				key4: true
				key5: null
				key6: {
					subkey1: stringVar
					subkey2: {
						subsubkey1: 10000
					}
				}
			} -> obj2
			
		test echoMapTest map: obj1 = obj2
		
		test echoMapTest map: obj2 = {
				"key1": "The first value"
				"key2": 31337, 31339
				"key3": 123.456
				key4: true
				key5: null
				key6: {
					subkey1: stringVar
					subkey2: {
						subsubkey1: 10000
					}
				}
			}
		
	suiteend
	
	// Operations may be used inside nested objects as well - see issue #36
	suitedef nestedobjectsWithOperations with
	
		variable operationVar initially (1 + 1)	
		variable obj1 initially {
			key1: operationVar
		}
		
		variable obj2
		
		call echoMap map: {
				key1: operationVar
			} -> obj2
			
		test echoMapTest map: obj1 = obj2
		
	suiteend
	
	
	suitedef nestedobjectsIncomplete with
		
		variable obj1 initially {
			key1: "The first value"
			key2: 31337, 31338
			key3: 123.456
		}
				
		// This test must still be successful even though we omitted key2 (because it is not to be tested)
		test echoMapTest map: obj1 = {
				key1: "The first value"
				key3: 123.456
		}
		
	suiteend
	
	
	suitedef nestedobjectsWithListsNeedingConversion with
	
		test integrity.fixtures.basic.beans.createNestedListHashMapTest = {
			"anArray": 1,2,3
			"aList": 1,2,3
		}
	
	suiteend
	
	
	suitedef nestedobjectsWithListsOfMaps with
	
		test integrity.fixtures.basic.beans.createNestedListWithMapsHashMapTest = {
			"anArray": {
				"anInnerKey": 1
			}, {
				"anInnerKey": 2
			}
			"aList": {
				"anInnerKey": 1
			}, {
				"anInnerKey": 2
			}
		}
	
	suiteend

packageend